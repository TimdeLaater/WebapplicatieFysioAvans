// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(FysioDBContext))]
    [Migration("20211025140137_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DomainModel.Models.CommentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CommentByEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CommentVisibleForPatient")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientFileModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommentByEmail");

                    b.HasIndex("PatientFileModelId");

                    b.ToTable("CommentModel");
                });

            modelBuilder.Entity("DomainModel.Models.PatientFileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiaCodeAndDiscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntakeDoneByEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IntakeSupervisionEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IssueDiscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TherapistEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TreatmentPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IntakeDoneByEmail");

                    b.HasIndex("IntakeSupervisionEmail");

                    b.HasIndex("TherapistEmail");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("PatientFileModel");
                });

            modelBuilder.Entity("DomainModel.Models.PersonModel", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Email");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("DomainModel.Models.TreatmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Complications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PatientFileModelId")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentByEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TreatmentEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TreatmentOrTrainingRoom")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TreatmentTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("VektisType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientFileModelId");

                    b.HasIndex("TreatmentByEmail");

                    b.ToTable("TreatmentModel");
                });

            modelBuilder.Entity("DomainModel.Models.TreatmentPlanModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountOfTreaments")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TreatmentPlanModel");
                });

            modelBuilder.Entity("DomainModel.Models.PatientModel", b =>
                {
                    b.HasBaseType("DomainModel.Models.PersonModel");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientDossierId")
                        .HasColumnType("int");

                    b.Property<int>("PatientNr")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNr")
                        .HasColumnType("int");

                    b.Property<int>("SchoolNr")
                        .HasColumnType("int");

                    b.HasIndex("PatientDossierId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("DomainModel.Models.TherapistModel", b =>
                {
                    b.HasBaseType("DomainModel.Models.PersonModel");

                    b.ToTable("Therapist");
                });

            modelBuilder.Entity("DomainModel.Models.TeacherModel", b =>
                {
                    b.HasBaseType("DomainModel.Models.TherapistModel");

                    b.Property<int>("BigNr")
                        .HasMaxLength(11)
                        .HasColumnType("int");

                    b.Property<int>("PersonnelNr")
                        .HasColumnType("int");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("DomainModel.Models.StudentModel", b =>
                {
                    b.HasBaseType("DomainModel.Models.TeacherModel");

                    b.Property<int>("StudentNr")
                        .HasColumnType("int");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("DomainModel.Models.CommentModel", b =>
                {
                    b.HasOne("DomainModel.Models.PersonModel", "CommentBy")
                        .WithMany()
                        .HasForeignKey("CommentByEmail");

                    b.HasOne("DomainModel.Models.PatientFileModel", null)
                        .WithMany("Comments")
                        .HasForeignKey("PatientFileModelId");

                    b.Navigation("CommentBy");
                });

            modelBuilder.Entity("DomainModel.Models.PatientFileModel", b =>
                {
                    b.HasOne("DomainModel.Models.PersonModel", "IntakeDoneBy")
                        .WithMany()
                        .HasForeignKey("IntakeDoneByEmail");

                    b.HasOne("DomainModel.Models.PersonModel", "IntakeSupervision")
                        .WithMany()
                        .HasForeignKey("IntakeSupervisionEmail");

                    b.HasOne("DomainModel.Models.PersonModel", "Therapist")
                        .WithMany()
                        .HasForeignKey("TherapistEmail");

                    b.HasOne("DomainModel.Models.TreatmentPlanModel", "TreatmentPlan")
                        .WithMany()
                        .HasForeignKey("TreatmentPlanId");

                    b.Navigation("IntakeDoneBy");

                    b.Navigation("IntakeSupervision");

                    b.Navigation("Therapist");

                    b.Navigation("TreatmentPlan");
                });

            modelBuilder.Entity("DomainModel.Models.TreatmentModel", b =>
                {
                    b.HasOne("DomainModel.Models.PatientFileModel", null)
                        .WithMany("Treatments")
                        .HasForeignKey("PatientFileModelId");

                    b.HasOne("DomainModel.Models.PersonModel", "TreatmentBy")
                        .WithMany()
                        .HasForeignKey("TreatmentByEmail");

                    b.Navigation("TreatmentBy");
                });

            modelBuilder.Entity("DomainModel.Models.PatientModel", b =>
                {
                    b.HasOne("DomainModel.Models.PersonModel", null)
                        .WithOne()
                        .HasForeignKey("DomainModel.Models.PatientModel", "Email")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DomainModel.Models.PatientFileModel", "PatientDossier")
                        .WithMany()
                        .HasForeignKey("PatientDossierId");

                    b.Navigation("PatientDossier");
                });

            modelBuilder.Entity("DomainModel.Models.TherapistModel", b =>
                {
                    b.HasOne("DomainModel.Models.PersonModel", null)
                        .WithOne()
                        .HasForeignKey("DomainModel.Models.TherapistModel", "Email")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModel.Models.TeacherModel", b =>
                {
                    b.HasOne("DomainModel.Models.TherapistModel", null)
                        .WithOne()
                        .HasForeignKey("DomainModel.Models.TeacherModel", "Email")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModel.Models.StudentModel", b =>
                {
                    b.HasOne("DomainModel.Models.TeacherModel", null)
                        .WithOne()
                        .HasForeignKey("DomainModel.Models.StudentModel", "Email")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModel.Models.PatientFileModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Treatments");
                });
#pragma warning restore 612, 618
        }
    }
}
