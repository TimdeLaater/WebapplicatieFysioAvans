// <auto-generated />
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(FysioDBContext))]
    partial class FysioDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DomainModel.Models.PersonModel", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("DomainModel.Models.PatientModel", b =>
                {
                    b.HasBaseType("DomainModel.Models.PersonModel");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientNr")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNr")
                        .HasColumnType("int");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("DomainModel.Models.StudentModel", b =>
                {
                    b.HasBaseType("DomainModel.Models.PersonModel");

                    b.Property<int>("StudentNr")
                        .HasColumnType("int");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("DomainModel.Models.TeacherModel", b =>
                {
                    b.HasBaseType("DomainModel.Models.PersonModel");

                    b.Property<int>("PersonnelNr")
                        .HasColumnType("int");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("DomainModel.Models.TherapistModel", b =>
                {
                    b.HasBaseType("DomainModel.Models.TeacherModel");

                    b.Property<int>("BigNr")
                        .HasMaxLength(11)
                        .HasColumnType("int");

                    b.Property<int>("PhoneNr")
                        .HasColumnType("int");

                    b.ToTable("Therapist");
                });

            modelBuilder.Entity("DomainModel.Models.PatientModel", b =>
                {
                    b.HasOne("DomainModel.Models.PersonModel", null)
                        .WithOne()
                        .HasForeignKey("DomainModel.Models.PatientModel", "Email")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModel.Models.StudentModel", b =>
                {
                    b.HasOne("DomainModel.Models.PersonModel", null)
                        .WithOne()
                        .HasForeignKey("DomainModel.Models.StudentModel", "Email")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModel.Models.TeacherModel", b =>
                {
                    b.HasOne("DomainModel.Models.PersonModel", null)
                        .WithOne()
                        .HasForeignKey("DomainModel.Models.TeacherModel", "Email")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModel.Models.TherapistModel", b =>
                {
                    b.HasOne("DomainModel.Models.TeacherModel", null)
                        .WithOne()
                        .HasForeignKey("DomainModel.Models.TherapistModel", "Email")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
